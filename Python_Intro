[npacio@ITSUSRALSP00620 Python]$ ./python  or  simply type python
Python 3.8.2 (default, Apr 11 2020, 21:28:36) 
[GCC 4.4.7 20120313 (Red Hat 4.4.7-23)] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>>   <======= PYTHON REPL
>>>


SAMPLE EXPRESSIONS:

>>>1 + 1
2
>>>_   <====== underscore in REPL shows last output
2
>>>_ + 1
3



>>> print ('Hello World')
Hello World  < =====  Side Effect


>>> for i in range (5):
...     x = i * 10   <------ indent 4 spaces STANDARD ( Rule: Use All Tab or All 4 Spaces not Both) - Significant WhiteSpace
...     print(x)
... 
0
10
20
30
40
>>> Ctrl+D

[npacio@ITSUSRALSP00620 Python]$

>>> Ctrl+Z
>>> 
[1]+  Stopped                 ./python
[npacio@ITSUSRALSP00620 Python]$ fg
./python
Enter
Enter
>>>
>>>



>>> import this
The Zen of Python, by Tim Peters

Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
>>> 


IMPORTING STANDARD LIBRARY MODULES:
1. import from
2. from module import name
3. from module import name as name2


>>> 
>>> import math
>>> math.sqrt(81)
9.0
>>> help
Type help() for interactive help, or help(object) for help about object.
>>> help(math)
Help on module math:

NAME
    math

DESCRIPTION
    This module provides access to the mathematical functions
    defined by the C standard.

FUNCTIONS
    acos(x, /)
        Return the arc cosine (measured in radians) of x.
    
    acosh(x, /)
        Return the inverse hyperbolic cosine of x.




>>> help(math.factorial)
Help on built-in function factorial in module math:

factorial(x, /)
    Find x!.
    
    Raise a ValueError if x is negative or non-integral.

>>> math.factorial(5)
120
>>> math.factorial(16)
20922789888000
>>> 
>>> 


>>> n = 5
>>> k = 3
>>> math.factorial(n) / (math.factorial(k) * math.factorial(n - k))
10.0
>>> from math import factorial
>>> factorial(n) / (factorial(k) * factorial(n - k))
10.0
>>>
>>> from math import factorial as fac
>>> fac(n) / (fac(k) * fac(n - k))
10.0
>>>
>>> fac(n) // (fac(k) * fac(n - k))   <====== double slash remove decimals
10
>>>


>>> 2**31-1   <====== Exponent (2exp31) - 1
2147483647
>>> fac(13)
6227020800
>>> fac(13) > 2**31-1   
True
>>> 
>>> 
>>> n = 100
>>> k = 2
>>> fac(n) // (fac(k) * fac(n - k))
4950
>>> 
>>> fac(n)
93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000
>>> 
>>> len(str(fac(n)))
158  <====== 158 digits
>>>



