#! /bin/bash
####################--------------------------------#######################
## Script to perform basic checks on network gears                       ##
## Version 2020                                                          ##
## Author:                              ##
## This script can be used run show commands on devices                  ##
####################--------------------------------#######################
clear
BASE_DIR=$PWD
DATE_1=`date +%Y%b%d`
TIME_1=`date +%H%M%S`
LOG_DIR="${BASE_DIR}/logs_${DATE_1}${TIME_1}"
LOG_FILE="${LOG_DIR}/show_commands_${DATE_1}_${TIME_1}.txt"
DB_FILE="/usr/bin/noc/DB"
NOC_USER=`echo $USER`
OUT_DIR="${LOG_DIR}/results"
SITE_IPS="${BASE_DIR}/.Site_IP_List.ppck"
rm -rf ${BASE_DIR}/*.ppck ${BASE_DIR}/logs* ${LOG_DIR} 2> /dev/null
print_center ()
{
        LENGTH=`echo $1 | wc -m | /bin/awk '{ print $1 }'`
        STR_LEN=`echo ${LENGTH} | /bin/awk '{ print $1/2 }' | cut -f1 -d.`
        WIDTH=`tput cols`
        CENTER=`echo ${WIDTH} | /bin/awk '{ print $1/2 }' | cut -f1 -d.`
        START_PT=`echo ${CENTER} ${STR_LEN} | /bin/awk '{ print $1-$2 }'`
        tput cuf ${START_PT} 2> /dev/null
        echo "${1}" 2> /dev/null
}
#
input_file_check ()
{
echo -en "Do you have input seed file? [Y|N]: "
read INPUT_FILE_ANS
if [ "${INPUT_FILE_ANS}" == "y" ] || [ "${INPUT_FILE_ANS}" == "Y" ]
then
	print_center "--------------------------------------------------------------"
	print_center "Here's the list of files you have in [${PWD}]."
	echo ""
	file * | grep 'ASCII text' 2> /dev/null | /bin/awk -F: '{ print $1 }'
	echo ""
	print_center "If the file is not listed here, please specify the file name with absolute path."
	print_center "--------------------------------------------------------------"
	echo -en "File name: "
	read INPUT_FILE
	FILE_TYPE=`file ${INPUT_FILE} 2> /dev/null | /bin/awk '{ print $2, $3 }'`
	echo "Input file is [ ${INPUT_FILE} ]"
	echo -en "Is this correct? [Y|N]: "
	read ANS_01
	if [ "${ANS_01}" == "y" ] || [ "${ANS_01}" == "Y" ]
	then
		if [ ! -f ${INPUT_FILE} ] || [ "${FILE_TYPE}" != "ASCII text" ]
		then
			echo "${INPUT_FILE} is not a valid file with IP addresses. Please select the correct file."
			exit
		fi
	elif [ "${ANS_01}" == "n" ] || [ "${ANS_01}" == "N" ]
	then
		echo "Aborting all actions..."
		exit
	else
		echo "Wrong choice. Aborting all actions..."
		exit
	fi
elif [ "${INPUT_FILE_ANS}" == "n" ] || [ "${INPUT_FILE_ANS}" == "N" ]
then
	echo -en "You can copy and paste IP Addresses here to create seed file. Do you want to go with that? [Y|N]: "
	read ANS_02
	if [ "${ANS_02}" == "y" ] || [ "${ANS_02}" == "Y" ]
	then
		INPUT_FILE="${BASE_DIR}/User_Input_${DATE_1}_${TIME_1}.ppck"
		> ${INPUT_FILE}
                echo ""
                print_center "----------------------- READ CAREFULLY -----------------------"
		print_center ">> Hit ENTER key first."
                print_center ">> Copy and paste IP addresses line-by-line"
                print_center ">> Hit ENTER key after entering last IP address"
		print_center ">> Press CTRL+D keys to finish."
                print_center "----------------------- READ CAREFULLY -----------------------"
                echo -en "Hit ENTER key to continue... "
                read xx
                cat > ${INPUT_FILE}
		echo ""
		echo "Here's the input data."
		echo "--------------------------------------------------------------"
		cat ${INPUT_FILE}
		echo "--------------------------------------------------------------"
	elif [ "${ANS_02}" == "n" ] || [ "${ANS_02}" == "N" ]
	then
		echo "Create seed file and try again. Aborting all actions..."
		exit
	else
		echo "Wrong choice. Aborting all actions..."
		exit
	fi
else
	echo "Wrong choice. Aborting all actions..."
	exit
fi
}
#
directory_checks ()
{
	if [ -d ${OUT_DIR} ] || [ -d ${LOG_DIR} ]
	then
	        rm -f ${LOG_DIR}/*.log ${LOG_DIR}/*.txt ${OUT_DIR}/*.txt
	else
	        mkdir -p ${OUT_DIR} 2> /dev/null
	fi
	echo "Script started on ${DATE_1} at ${TIME_1}." | tee ${LOG_FILE} || exit
}
#
read_credentials ()
{
	echo -en "User ID (TACACS): "
	read JNJ_TACACS_ID
	echo -en "TACACS Password : "
	read -s JNJ_TACACS_PSWD
}
#
#
detect_loopback ()
{
	for CI_LP in `/bin/awk '{ print $1 }' ${INPUT_FILE}`
	do
		#
		for DUMMY in ${CI_LP}
		do
			/usr/bin/sshpass -p "${JNJ_TACACS_PSWD}" ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l ${JNJ_TACACS_ID} ${DUMMY} 2> /dev/null <<EOF
			sh run
EOF
		done > ${CI_LP}_loopback
done
}
#
#
show_commands_switch ()
{
	for CIS in `/bin/awk '{ print $1 }' ${INPUT_FILE}`
	do
		OUTPUT_FILE_SHOCOMM="${LOG_DIR}/${DATE_1}_${TIME_1}_${CIS}_show_commands.txt"
		for CI in ${CIS}
		do
		echo "------------------- ${CI} Show Commands -------------------" | tee -a ${LOG_FILE}
		/usr/bin/sshpass -p "${JNJ_TACACS_PSWD}" ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l ${JNJ_TACACS_ID} ${CI} 2> /dev/null <<EOF
		term len 0
		show clock
		show run
		show version
		show hardware
		show inventory
		show module
		show processes cpu history
		show environment all
		show power inline
		show ip interface brief
		show interface status
		show interface trunk
		show cdp neighbors
		show ip eigrp neighbors
		show access-lists
		show snmp
		show ntp status
		show standby brief
		show vtp status
		show vlan
		show mac address-table
		show ip route summary
		show logging
		term len 30
		exit
EOF
		done | tee -a ${OUTPUT_FILE_SHOCOMM}
	done
}
#
show_commands_router ()
{
	for CIS in `/bin/awk '{ print $1 }' ${INPUT_FILE}`
	do
		OUTPUT_FILE_SHOCOMM="${LOG_DIR}/${DATE_1}_${TIME_1}_${CIS}_show_commands.txt"
		for CI in ${CIS}
		do
		echo "------------------- ${CI} Show Commands -------------------" | tee -a ${LOG_FILE}
		/usr/bin/sshpass -p "${JNJ_TACACS_PSWD}" ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l ${JNJ_TACACS_ID} ${CI} 2> /dev/null <<EOF
		term len 0
		show clock
		show version
		sh flash
		show run
		show proc cpu 
		sh ip int brief
		show int desc
		show ip bgp summary
		show ip eigrp neighbors
		show ip route
		sh policy-map interface 
		sh policy-map interface input
		sh policy-map interface output
		show policy-map interface | i drop
		show snmp
		show arp
		show tech-support
		term len 30
		exit
EOF
		done | tee -a ${OUTPUT_FILE_SHOCOMM}
	done
}
#
#
show_commands_wlc ()
{
	for CIS in `/bin/awk '{ print $1 }' ${INPUT_FILE}`
	do
		OUTPUT_FILE_SHOCOMM="${LOG_DIR}/${DATE_1}_${TIME_1}_${CIS}_show_commands.txt"
		for CI in ${CIS}
		do
		echo "------------------- ${CI} Show Commands -------------------" | tee -a ${LOG_FILE}
		/usr/bin/sshpass -p "${JNJ_TACACS_PSWD}" ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l ${JNJ_TACACS_ID} ${CI} 2> /dev/null <<EOF
		if User:
		print ${JNJ_TACACS_ID}
		if Password:		
		print ${JNJ_TACACS_PSWD}
		config paging disable
		show sys info
		show ap summary
		show ap join stats summary all
		show ap uptime
		exit
EOF
		done | tee -a ${OUTPUT_FILE_SHOCOMM}
	done
}
#
show_commands_rb-sh ()
{
	for CIS in `/bin/awk '{ print $1 }' ${INPUT_FILE}`
	do
		OUTPUT_FILE_SHOCOMM="${LOG_DIR}/${DATE_1}_${TIME_1}_${CIS}_show_commands.txt"
		for CI in ${CIS}
		do
		echo "------------------- ${CI} Show Commands -------------------" | tee -a ${LOG_FILE}
		echo "show info
		show hosts
		show wccp
		show failover
		show failover interceptor
		show remote ip
		show stats memory
		show stats event
		show hardware all
		show raid info detail
		show interfaces brief
		show run full
		show alarms triggered
		show stats cpu
		show ip in-path route inpath0_0
		show ip in-path route inpath0_1
		show ip in-path route inpath2_0
		show ip in-path route inpath3_0
		show interceptor name all
		show steelhead name all" | tee -a ${LOG_FILE} 
		echo "-----------------------------------------------------------" | tee -a ${LOG_FILE}

		/usr/bin/sshpass -p "${JNJ_TACACS_PSWD}" ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l ${JNJ_TACACS_ID} ${CI} 2> /dev/null <<EOF
en
show info
show hosts
show wccp
show failover
show failover interceptor
show remote ip
show stats memory
show stats event
show hardware all
show raid info detail
show interfaces brief
show run full
show alarms triggered
show stats cpu
show ip in-path route inpath0_0
show ip in-path route inpath0_1
show ip in-path route inpath2_0
show ip in-path route inpath3_0
show interceptor name all
show steelhead name all
term len 30
exit
EOF
		done | tee -a ${OUTPUT_FILE_SHOCOMM}
	done
}
#
f5v11x ()
{
	for CIS in `/bin/awk '{ print $1 }' ${INPUT_FILE}`
	do
		OUTPUT_FILE_SHOCOMM="${LOG_DIR}/${DATE_1}_${TIME_1}_${CIS}_show_commands.txt"
		for CI in ${CIS}
		do
		echo "------------------- ${CI} Show Commands -------------------" | tee -a ${LOG_FILE}
		/usr/bin/sshpass -p "${JNJ_TACACS_PSWD}" ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l ${JNJ_TACACS_ID} ${CI} 2> /dev/null <<EOF
		show sys version
		show sys hardware
		show sys failover 
		show sys ha-group
		show sys ha-status
		show sys license
		show sys connection
		show sys traffic
		show net vlan
		show net trunk
		show net route
		show net self
		show net interface
		show ltm virtual
		show ltm pool
		show ltm node
		show ltm snat
		show running-config
EOF
		done | tee -a ${OUTPUT_FILE_SHOCOMM}
	done
}
#
f5v9n10x ()
{
	for CIS in `/bin/awk '{ print $1 }' ${INPUT_FILE}`
	do
		OUTPUT_FILE_SHOCOMM="${LOG_DIR}/${DATE_1}_${TIME_1}_${CIS}_show_commands.txt"
		for CI in ${CIS}
		do
		echo "------------------- ${CI} Show Commands -------------------" | tee -a ${LOG_FILE}
		/usr/bin/sshpass -p "${JNJ_TACACS_PSWD}" ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l ${JNJ_TACACS_ID} ${CI} 2> /dev/null <<EOF
version
virtual
pool
node
interface
trunk
self
vlan
list
platform
EOF
		done | tee -a ${OUTPUT_FILE_SHOCOMM}
	done
}
#
show_commands_asa ()
{
	for CIS in `/bin/awk '{ print $1 }' ${INPUT_FILE}`
	do
		OUTPUT_FILE_SHOCOMM="${LOG_DIR}/${DATE_1}_${TIME_1}_${CIS}_show_commands.txt"
		for CI in ${CIS}
		do
		echo "------------------- ${CI} Show Commands -------------------" | tee -a ${LOG_FILE}
		/usr/bin/sshpass -p "${JNJ_TACACS_PSWD}" ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -l ${JNJ_TACACS_ID} ${CI} 2> /dev/null <<EOF
		show cpu usage
		show memory detail
		sh int ip brief
		show failover
		show version
EOF
		done | tee -a ${OUTPUT_FILE_SHOCOMM}
	done
}
#
show_commands_f5 ()
{
	echo "1. F5 v11.x"
	echo "2. F5 v9 and v10.x"
	echo "3. Exit"
	echo ""
	echo -en "Select F5 version: "
	read F5VERSION
	case "${F5VERSION}" in
        1)
		f5v11x
		;;
	2)
		f5v9n10x
		;;
	3)
		exit
		;;
	*)
		echo "Invalid selection."
		exit
		;;
	esac

}
#
show_commands ()
{
	echo ""
	echo ""
	echo "1. Switch"
	echo "2. Router"
	echo "3. WLC"
	echo "4. Riverbed Steelhead"
	echo "5. F5"
	echo "6. ASA"
	echo "7. Exit"
	echo ""
	echo -en "Select one from the list above: "
	read SUB_MENU
	case "${SUB_MENU}" in
    1)
		show_commands_switch
		;;
	2)
		show_commands_router
		;;
	3)
		show_commands_wlc
		;;
	
	4)
		show_commands_rb-sh
		;;
	5)
		show_commands_f5
		;;
	6)
		show_commands_asa
		;;
	7)
		exit
		;;
	*)
		echo "Wrong input. Aborting all actions..."
		exit
		;;
	esac
}
#
final_files ()
{
	for RESULTS in `cat ${INPUT_FILE}`
	do
		cat ${LOG_DIR}/*${RESULTS}* >> ${OUT_DIR}/${RESULTS}.txt
	done
}
#
directory_checks
input_file_check
read_credentials
show_commands
final_files
#############################################################################
rm -rf ${BASE_DIR}/*.ppck ${BASE_DIR}/logs* ${LOG_DIR} 2> /dev/null
